openapi: 3.0.0
info:
  title: Safe Places - Server Backend
  description: >-
    API spec for SAFE PLACES Backend as part of the SAFE PATHS initiative.  You
    can find out more about SAFE PATHS AT
    [https://covidsafepaths.org/](https://covidsafepaths.org/)
  version: 1.0.0
  contact:
    email: satoshi.kawase@pathcheck.org
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: /v1
components:
  securitySchemes:
    contactTracer:
      type: http
      scheme: bearer
      description: contact tracer access
    admin:
      type: http
      scheme: bearer
      description: admin access
  responses:
    UnauthorizedError:
      description: Lacks sufficient authority for operation
    InvalidRequest:
      description: Invalid request
    InternalServerError:
      description: Internal Server Error
    AccessForbidden:
      description: Access forbidden
    NotFound:
      description: Not Found
    InvalidToken:
      description: "There is no user with the username or the password does not match."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid credentials"
  parameters:
    authCodeParam:
      in : path
      name: code
      required: true
      description: 'Access code'
      schema:
        $ref: '#/components/schemas/authCode'
    caseIdParam:
      in : path
      name: caseId
      required : true
      description: 'The ID of the case'
      schema:
        $ref: '#/components/schemas/caseId'
    orgIdParam:
      in : path
      name: orgId
      required: true
      description: 'the ID of the org'
      schema:
        $ref: '#/components/schemas/orgId'
    pointIdParam:
      in : path
      name: pointId
      required: true
      description: 'The Id of the point'
      schema:
        $ref: '#/components/schemas/pointId'
  schemas:
    authCode:
      type: string
      example: bluebird
    authCodeExpiration:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/authCode'
        expiresAt:
          $ref : '#/components/schemas/timeString'
    caseId:
      type: number
      example: 23432461
    caseState:
      type: string
      enum:
        - original
        - unpublished
        - staging
        - published
    case:
      type : object
      properties:
        id:
          type: integer
          example: 14
        updatedAt:
          $ref : '#/components/schemas/timeString'
        status:
          $ref: '#/components/schemas/caseState'
        expiresAt:
          $ref : '#/components/schemas/timeString'
    cases:
      type: array
      items:
        $ref: '#/components/schemas/case'
    concernPointDBAdd:
      type: object
      properties:
        longitude: 
          type : number
          example: 14.91328448
        latitude:
          type : number
          example: 41.24060321
        time : 
          $ref : '#/components/schemas/timeString'
    concernPointDb:
      type: object
      properties:
        id:
          type: number
          example: 12
        longitude: 
          type : number
          example: 14.91328448
        latitude:
          type : number
          example: 41.24060321
        time : 
          type : string
          example: "2020-05-30T18:25:43.511Z"
    concernPointApp: 
      type: object
      properties:
        longitude:
          type: number
          example: 14.91328448
        latitude:
          type: number
          example: 41.24060321
        time:
          type: number
          example: 1589117739000
        hash:
          type: string
          example: 87e916850d4def3c
    concernPoints:
      type: array
      items:
        $ref: '#/components/schemas/concernPointApp'
    consent:
      type: object
      properties:
        consent : 
          type: boolean
          example: true
        accessCode:
          $ref : '#/components/schemas/authCode'
    orgId:
      type: number
      example: 32424552
    pointId:
      type: integer
    timeString:
      type: string
      example: "2020-05-30T18:25:43.511Z"
    token: 
      type: object
      properties:
        token:
          type: string
          example: "eyABCD4321JIUzI1NiIsInR5cCI6IkpXVCJ9"
    valid:
      type: object
      properties:
        valid : 
          type: boolean
          example: true
    login:
      type: object
      properties:
        username:
          type: string
          example: "admin"
        password:
          type: string
          example: "admin"
  examples:
    concernPoints:
      value: {  
                "concernPoints" : 
              [  {"id": 232, "time":"2020-05-30T18:25:43.511Z","longitude":-0.10753902581515137,"latitude":51.55987524514395},
                {"id": 233, "time":"2020-05-30T18:25:43.511Z","longitude":-0.06407687379643874,"latitude":51.53626227398831},
                {"id": 234, "time":"2020-05-30T18:25:43.511Z","longitude":-0.10383699531844902,"latitude":51.5687569927817},
                {"id": 235, "time":"2020-05-30T18:25:43.511Z","longitude":-0.09565287120047716,"latitude":51.56663238135933},
                {"id": 236, "time":"2020-05-30T18:25:43.511Z","longitude":-0.13367363946595986,"latitude":51.53989797636888},
                {"id": 237, "time":"2020-05-30T18:25:43.511Z","longitude":-0.05729357699158614,"latitude":51.53321925729781},
                {"id": 238, "time":"2020-05-30T18:25:43.511Z","longitude":-0.054365847106010994,"latitude":51.550572004199395},
                {"id": 239, "time":"2020-05-30T18:25:43.511Z","longitude":-0.12014169804782877,"latitude":51.54859663929235}
              ]}
    casesList:
      value: 
        {
          "cases": [
                    {
                      "id": 12,
                      "updatedAt": "2020-05-21T18:25:43.511Z",
                      "status": "In Progress",
                      "expiresAt": "2020-05-30T18:25:43.511Z"
                    },
                    {
                      "id": 13,
                      "updatedAt": "2020-05-21T18:25:43.511Z",
                      "status": "Staged for Publishing",
                      "expiresAt": "2020-05-30T18:25:43.511Z"
                    },
                    {
                      "id": 14,
                      "updatedAt": "2020-05-21T18:25:43.511Z",
                      "status": "Published",
                      "expiresAt": "2020-05-30T18:25:43.511Z"
                    }
                  ]
        }
paths:
  /login:
    post:
      operationId: AuthController_login
      summary: Initiate authorization - part of mandatory API
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: The user was found and the password matched.
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/token'
        '401':
          $ref: '#/components/responses/InvalidToken'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/organization/{orgId}/cases':
    parameters:
      - $ref: '#/components/parameters/orgIdParam'
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cases:
                    $ref : '#/components/schemas/cases'
              examples:
                one:
                  $ref: '#/components/examples/casesList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/organization/{orgId}/case':
    parameters:
      - $ref: '#/components/parameters/orgIdParam'
    post:
      responses:
        '200':
          description: Creates a new case and associates it with the organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/case'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/case/{caseId}':
    delete:
      summary: Delete case record
      parameters:
        - $ref: '#/components/parameters/caseIdParam'
      responses:
        '200':
          description: Case deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'        
  '/case/{caseId}/points':
    get:
      summary: Gets patient case record
      parameters:
        - $ref: '#/components/parameters/caseIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  concernPoints:
                    $ref: '#/components/schemas/concernPointDb'
              examples:
                one: 
                  $ref : '#/components/examples/concernPoints'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - contactTracer: []
        - admin: []
  '/case/{caseId}/point':
    post:
      summary: Creates a new point of concern to be asssociated with the case
      parameters:
        - $ref: '#/components/parameters/caseIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/concernPointDBAdd'
      responses:
        '200':
          description: Patient case updated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/concernPointDb'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - contactTracer: []
        - admin: []
        
  '/point/{pointId}':
    put:
      summary: Updates an existing point of concern
      parameters: 
        - $ref : '#/components/parameters/pointIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/concernPointDBAdd'
      responses:
        '200': 
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/concernPointDb'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Deletes an existing point of concern
      parameters: 
        - $ref: '#/components/parameters/pointIdParam'
      responses:
        '200':
          description: Point was deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/case/{caseId}/access-code':
    post:
      summary: Return an access code that needs to be passed in the payload of the `/upload` endpoint
      parameters:
        - $ref: '#/components/parameters/caseIdParam'
      responses:
        '201':
          description: Created access code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authCodeExpiration'
        '400': 
          $ref : '#/components/responses/InvalidRequest'
        '401': 
          $ref : '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      

  '/access-code/valid/{code}':
    get:
      summary: Determines whether an access code is valid and if it can be used to perform an `/upload` API call
      parameters: 
        - $ref: '#/components/parameters/authCodeParam'
      responses:
        '200':
          description: Successful REquest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/valid'
        '500': 
          $ref: '#/components/responses/InternalServerError'

  /consent:
    post:
      summary: Logs user consent to health authority’s terms of service. Invalidates the accessCode that is passed in the payload if  consent  is false.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/consent'
      responses:
        '200':
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError' 
  /upload:
    post:
      summary: Accepts SAFE PATHS data upload from user. Access code sent in body must match access code created in /case/{caseId}/auth_code call
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authCode:
                  $ref: '#/components/schemas/authCode'
                concernPoints:
                  $ref: '#/components/schemas/concernPoints'
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'