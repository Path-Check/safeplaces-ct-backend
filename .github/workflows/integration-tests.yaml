# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Integration Tests

on:
  pull_request:
    branches:
      - dev
    # paths:
    #   - 'expressjs/**/**'
  push:
    branches:
      - dev-add-tests
      - PLACES-338
    # paths:
    #   - 'expressjs/**/**'

# Environment variables available to all jobs and steps in this workflow
env:
  DB_HOST: localhost
  DB_NAME: spl
  DB_PASS: postgres
  DB_USER: postgres
  NODE_ENV: test
  JWT_EXP: 3600
  DB_HOST_PUB: localhost
  DB_USER_PUB: postgres
  DB_NAME_PUB: spl
  DB_PASS_PUB: postgres
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  SEED_MAPS_API_KEY: ${{ secrets.SEED_MAPS_API_KEY }}
  TESTS_ENV: ${{ secrets.TESTS_ENV }}
  AUTH_LOGOUT_REDIRECT_URL: 'http://127.0.0.1:5000'
  AUTH0_BASE_URL: 'https://pathcheck.us.auth0.com'
  AUTH0_CLIENT_ID: 'Dgy5n22Gcuo3zRHzWLk19CCZ9bUNbVhU'
  AUTH0_CLIENT_SECRET: 'fffp66sf-Qppw9xsC1pzUREzkdNGTz-8H8DdesL0sgGO74vivJs_NyhcDLQZjtJb'
  AUTH0_API_AUDIENCE: 'https://safeplaces.cloud/'
  AUTH0_CLAIM_NAMESPACE: 'https://safeplaces.cloud'
  AUTH0_MANAGEMENT_API_AUDIENCE: ''
  AUTH0_MANAGEMENT_CLIENT_ID: ''
  AUTH0_MANAGEMENT_CLIENT_SECRET: ''
  AUTH0_REALM: test

jobs:
  run-integration-tests:
    name: Running Test Integrations
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: bitnami/postgresql:latest
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRESQL_DATABASE: spl
          POSTGRESQL_POSTGRES_PASSWORD: postgres

        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
      - run: |
          npm install -g knex &
          npm install &
          wait
      - run: |
          echo $TESTS_ENV | base64 --decode --ignore-garbage > .env &&
          source .env && npm test
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
