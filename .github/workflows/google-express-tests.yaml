# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Newman Tests

on:
  pull_request:
    branches:
      - dev
    # paths:
    #   - 'expressjs/**/**'
  push:
    branches:
      - tests
      - dev-fix-newman
    # paths:
    #   - 'expressjs/**/**'

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  IMAGE: safeplaces-be-express-test
  REGISTRY_HOSTNAME: gcr.io
  DEPLOYMENT_NAME: ${{ secrets.XP_TEST_DEPLOYMENT_NAME }}
  CONTAINER_NAME: ${{ secrets.XP_TEST_CONTAINER_NAME }}
  NAMESPACE: ${{ secrets.GKE_NAMESPACE }}
  TESTS_ENV: ${{ secrets.TESTS_ENV }}
  AUTH_LOGOUT_REDIRECT_URL: 'http://127.0.0.1:5000'
  AUTH0_BASE_URL: 'https://safeplaces.us.auth0.com'
  AUTH0_CLIENT_ID: 'dXBl74NypszcDQQ2WPJsIUj99lSHcSMf'
  AUTH0_CLIENT_SECRET: '6lpWMmjsG3DEwmzmvqBuPx4MiBZEdqk4ubtO-14WRyDRIgukglJhDAgN-NgQzxIv'
  AUTH0_API_AUDIENCE: 'https://safeplaces.cloud/'
  AUTH0_CLAIM_NAMESPACE: 'https://safeplaces.cloud'
  AUTH0_DB_CONNECTION: Test

jobs:
  build-push-artifact:
    name: Run Newman Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # working-directory: expressjs
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.0'
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
          export_default_credentials: true

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      # Build the Docker image
      - name: Build
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy Test Environment
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
          kubectl config set-context --current --namespace=${NAMESPACE}
          cd base/env/test && ../../../kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
          ../../../kustomize build . | kubectl apply -f - --namespace=${NAMESPACE}
          kubectl rollout status deployment $DEPLOYMENT_NAME --namespace ${NAMESPACE}
          kubectl get services -o wide

      - uses: matt-ball/newman-action@master
        with:
          collection: tests/tests/backend_collection.json
          environment: tests/tests/FASTAPI.postman_environment.json
